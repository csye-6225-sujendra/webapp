name: Packer Deployment
 
on:
  pull_request:
    types: [closed]
    branches: [main]
 
jobs:
  build:
    name: Packer
    runs-on: ubuntu-latest
    env:
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_DIALECT: ${{ secrets.DB_DIALECT }}
      DB_POOL_MAX: ${{ secrets.DB_POOL_MAX }}
      DB_POOL_MIN: ${{ secrets.DB_POOL_MIN }}
      DB_POOL_ACQUIRE: ${{ secrets.DB_POOL_ACQUIRE }}
      DB_POOL_IDLE: ${{ secrets.DB_POOL_IDLE }}
      MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
      DB_PORT: ${{ secrets.DB_PORT }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
 
    - name: GCloud authentication      
      id: 'auth'
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
 
    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v2'
 
    - name: Install Packer
      run: |
        if ! command -v packer &> /dev/null
        then
            curl -O https://releases.hashicorp.com/packer/1.7.4/packer_1.7.4_linux_amd64.zip
            unzip packer_1.7.4_linux_amd64.zip
            sudo mv packer /usr/local/bin/packer
        fi
        packer --version

    
    - name: Set up MySQL server
      run: |
        sudo systemctl start mysql
        sudo systemctl status mysql
 
    - name: Create MySQL  database
      run: |
        sudo mysql -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" -e "CREATE DATABASE ${{ secrets.DB_NAME }};"
      
    - name: Alter MySQL Root Password
      run: |
        sudo mysqladmin -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" password "${{ secrets.DB_PASSWORD }}"
    
    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 18.15.0
 
    - name: Install dependencies
      run: npm install
 
    - name: run test
      run: npm test
 
    - name: create artifact
      run: |
        zip -r webapp.zip ./
 
    - name: Initialize Packer
      run: packer init packer/packer.pkr.hcl
    
    - name: Check Formatting
      run: |
        if !packer fmt -check packer/packer.pkr.hcl; then
          echo "Invalid packer format"
          exit 1
        fi
 
    - name: Validate Packer Template
      run: packer validate packer/packer.pkr.hcl
    
 
    - name: Deploy packer image
      run: packer build packer/packer.pkr.hcl

    - name: GET Packer Image ID
      id: GET_Packer_Image_Id
      run: |
          PACKER_BUILD_IMAGE_ID=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d ":" -f2)
          echo $PACKER_BUILD_IMAGE_ID
          echo "PACKER_BUILD_IMAGE_ID=$PACKER_BUILD_IMAGE_ID" >> "$GITHUB_OUTPUT"
          echo NEW_IMAGE=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d ":" -f2) >> $GITHUB_ENV
      
    - name: Check Packer Image ID
      run: echo $PACKER_BUILD_IMAGE_ID

    - name: Create new instance template version
      env:
            Project_ID: ${{secrets.Project_ID}}
            IT_TEMPLATE_DESCRIPTION : ${{secrets.IT_TEMPLATE_DESCRIPTION}} 
            VIRTUAL_MACHINE_TYPE: ${{secrets.VIRTUAL_MACHINE_TYPE}}
            REGION: ${{secrets.REGION}}
            STARTUP_SCRIPT: ${{ secrets.STARTUP_SCRIPT }}
            MAINTENANCE_POLICY: ${{secrets.MAINTENANCE_POLICY}}
            PROVISIONING_MODEL: ${{secrets.PROVISIONING_MODEL}}
            SERVICE_ACCOUNT: ${{secrets.SERVICE_ACCOUNT}}
            SCOPES: ${{secrets.SCOPES}}
            VM_TAG: ${{secrets.VM_TAG }}
            VIRTUAL_MACHINE_IMAGE: ${{env.PACKER_BUILD_IMAGE_ID}}
            VIRTUAL_MACHINE_DISK_SIZE_GB: ${{secrets.VIRTUAL_MACHINE_DISK_SIZE_GB}}
            VIRTUAL_MACHINE_DISK_TYPE: ${{secrets.VIRTUAL_MACHINE_DISK_TYPE}}
            IT_DISK_AUTO_DELETE: ${{ secrets.IT_DISK_AUTO_DELETE}}
            IT_DISK_BOOT: ${{secrets.IT_DISK_BOOT}}
            KMS_KEY_SELF_LINK: ${{secrets.KMS_KEY_SELF_LINK}}
            DEVICE_NAME:  ${{secrets.DEVICE_NAME}}
            SS_DB_HOST: ${{secrets.SS_DB_HOST}}
            SS_DB_USER: ${{secrets.SS_DB_USER}}
            SS_DB_PASSWORD: ${{secrets.SS_DB_PASSWORD}}
            SS_DB_NAME: ${{secrets.SS_DB_NAME}}
            SS_DB_PORT: ${{secrets.SS_DB_PORT}}
            SS_DB_DIALECT: ${{secrets.SS_DB_DIALECT}}
            SS_DB_POOL_MAX: ${{secrets.SS_DB_POOL_MAX}}
            SS_DB_POOL_MIN: ${{secrets.SS_DB_POOL_MIN}}
            SS_DB_POOL_ACQUIRE: ${{secrets.SS_DB_POOL_ACQUIRE}}
            SS_DB_POOL_IDLE: ${{secrets.SS_DB_POOL_IDLE}}

      run: |
          gcloud compute images list  --sort-by=~creationTimestamp --format='value(NAME)' --limit=1
          gcloud compute instance-templates create instance-template1 \
          --project=${{env.Project_ID}} \
          --description=Creating\ Regional\ Compute\ Instance\ Template \
          --instance-template-region="$REGION" \
          --machine-type=${{env.VIRTUAL_MACHINE_TYPE}} \
          --network-interface=network-tier=PREMIUM,subnet=webapp \
          --metadata=startup-script=${{env.STARTUP_SCRIPT}} \
          --maintenance-policy=${{env.MAINTENANCE_POLICY}} \
          --provisioning-model=${{env.PROVISIONING_MODEL}} \
          --service-account=${{env.SERVICE_ACCOUNT}} \
          --scopes=${{env.SCOPES}} \
          --region="$REGION" \
          --tags=${{env.VM_TAG}} \
          --create-disk=auto-delete=${{env.IT_DISK_AUTO_DELETE}},boot=${{env.IT_DISK_BOOT}},device-name=${{env.DEVICE_NAME}},image=${{ env.NEW_IMAGE }},kms-key=${{env.KMS_KEY_SELF_LINK}},mode=rw,size=${{env.VIRTUAL_MACHINE_DISK_SIZE_GB}},type=${{env.VIRTUAL_MACHINE_DISK_TYPE}} \
          --no-shielded-secure-boot \
          --shielded-vtpm \
          --shielded-integrity-monitoring \
          --reservation-affinity=any

    - name: Configure instance group with new template
      env:
          INSTANCE_GROUP_NAME: "webapp-igm"
          INSTANCE_TEMPLATE_NAME: "instance-template1"
          ZONE_OR_REGION: ${{secrets.REGION}}
          PROJECT_ID: ${{ secrets.PROJECT_ID }}

      run: |
        gcloud compute instance-groups managed set-instance-template  ${{ env.INSTANCE_GROUP_NAME }} \
        --template=projects/${{ env.PROJECT_ID }}/regions/${{ env.ZONE_OR_REGION }}/instanceTemplates/${{env.INSTANCE_TEMPLATE_NAME}} \
        --region=${{ env.ZONE_OR_REGION }} \
        --project=${{ env.PROJECT_ID }}

    - name: Start rolling update
      env:
          INSTANCE_GROUP_NAME: "webapp-igm"
          INSTANCE_TEMPLATE_NAME: "instance-template1"
          ZONE_OR_REGION: ${{secrets.REGION}}
          PROJECT_ID: ${{ secrets.PROJECT_ID }}

      run: |
        gcloud compute instance-groups managed rolling-action start-update ${{ env.INSTANCE_GROUP_NAME }} \
        --version=template=projects/${{ env.PROJECT_ID }}/regions/${{ env.ZONE_OR_REGION }}/instanceTemplates/${{env.INSTANCE_TEMPLATE_NAME}} \
        --max-surge=5 \
        --region=${{ env.ZONE_OR_REGION }} \
        --project=${{ env.PROJECT_ID }}

    - name: Monitor instance group update
      env:
          INSTANCE_GROUP_NAME: "webapp-igm"
          INSTANCE_TEMPLATE_NAME: "instance-template1"
          ZONE_OR_REGION: ${{secrets.REGION}}
          PROJECT_ID: ${{ secrets.PROJECT_ID }}

      run: |
        status="RUNNING"
        while [ "$status" != "True" ]; do
        status=$(gcloud compute instance-groups managed describe $INSTANCE_GROUP_NAME --region=$ZONE_OR_REGION --project=$PROJECT_ID --format="value(status.versionTarget.isReached)")
        sleep 10
        done